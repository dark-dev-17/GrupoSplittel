<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - @System.Configuration.ConfigurationManager.AppSettings["ProductionMode"] - Admin Ecom</title>

    <environment include="Development">
        <partial name="_Styles" />
    </environment>
    <environment exclude="Development">
        <partial name="_Styles" />
    </environment>
</head>
<body class = "@Html.Raw((this.ViewContext.RouteData.Values["controller"].ToString() == "FichaTecnica" ? "" : ""))">
    <div id="PageMain">
        <div v-if="loadingPageMain == true" id="preloader">
            <div class="container h-100">
                <div class="row align-items-center h-100">
                    <div class="col-6 mx-auto">
                        <div class="jumbotron" style="background-color: #fff">
                            <center><img id="slidecaption" src="~/images/logo_fibremex.png" alt="Alternate Text" /></center>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    @Html.AntiForgeryToken()
    @{
        var controllerName = this.ViewContext.RouteData.Values["controller"].ToString();
        var controllerAction = this.ViewContext.RouteData.Values["action"].ToString();
    }
    @if (controllerName == "Login" ||  controllerName == "ErrorPages"  || controllerName == "ProductoPatchCord"  || controllerName == "ProductoMPO"  || 
        controllerName == "ProductoPigtail"  || 
        controllerName == "ProductoCabServicio"  || 
        controllerName == "ProductoDistribuidor" ||
        controllerName == "ProductoJumperConector" ||
        controllerName == "ProductoJumperCable" ||
        controllerName == "ProductoDistribuidorPrecon" ||
        controllerName == "ProductoDistribuidorPrecar"  || controllerName == "HomeAnuncio" && controllerAction == "Order"
    )
    {
        @RenderBody()
    }
    else
    {
        <partial name="_SlideBar" />
        <partial name="_NavBar" />
        <div class="br-mainpanel">
            <div class="br-pageheader pd-y-15 pd-l-20">
                <nav class="breadcrumb pd-0 mg-0 tx-12">
                    <a class="breadcrumb-item" href="@Url.Action("Index","Home")">Home</a>
                    <span class="breadcrumb-item active">@ViewData["Title"]</span>
                    <partial name="_BreadCrums" />
                </nav>
            </div>
            @if (controllerName != "FichaTecnica")
            {
                <div class="pd-x-20 pd-sm-x-30 pd-t-20 pd-sm-t-30">
                    <h4 class="tx-gray-800 mg-b-5">@ViewData["Title"]</h4>
                </div>
            }
            <div class="br-pagebody pd-x-20 pd-sm-x-30 pd-b-20">
                <div class="row">
                    <div class="col-12">
                        @RenderBody()
                    </div>
                </div>
            </div>
        </div>
        
    }
    <environment include="Development">
        <partial name="_Scripts" />
    </environment>
    <environment exclude="Development">
        <partial name="_Scripts" />
    </environment>
    <script>
        var PageMain = new Vue({
            el: "#PageMain",
            data: {
                loadingPageMain: true,
            },
            beforeCreate() {
                this.loadingPageMain = true;
            },
            mounted() {
                this.loadingPageMain = false;
            },
            methods: {
                verCliente: function (CardCode) {
                    window.location = '@Url.Action("Show","BussinesPartner")/' + CardCode;
                },
                GetNotifications: function () {
                    document.getElementById("HeaderNotification").innerHTML = '<div class="d-flex bg-gray-200 ht-300 pos-relative align-items-center"><div class="sk-spinner sk-spinner-pulse bg-gray-800"></div></div>'
                    axios.get('@Url.Action("List","Notificacion")', null, null).then(response => {
                        document.getElementById("HeaderNotification").innerHTML = '';
                        document.getElementById("HeaderNotification").innerHTML = response.data;
                    }).catch(error => {
                        this.ShowMessageErrorShort(error.response.data, 'error')
                        document.getElementById("HeaderNotification").innerHTML = '';
                    })
                },
                test: function (CardCode) {
                    alert(CardCode)
                },
                ShowMessageErrorShort: function (text,icon) {
                    const Toast = Swal.mixin({
                          toast: true,
                          position: 'top-end',
                          showConfirmButton: false,
                          timer: 4000,
                          timerProgressBar: true,
                          onOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                          }
                        })

                        Toast.fire({
                          icon: icon,
                          title: text
                        })
                },
            }
        });

    </script>
    @RenderSection("Scripts", required: false)
</body>
</html>
