@model EcomDataProccess.Ecom_Producto
@using Microsoft.AspNetCore.Http;
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@inject IHttpContextAccessor HttpContextAccessor
@{
    int UserId = (int)HttpContextAccessor.HttpContext.Session.GetInt32("USR_IdSplinnet");
    ViewData["Title"] = "";

    string DescripcioProduto = "";
    if (!string.IsNullOrEmpty(Model.ItemCode) && !string.IsNullOrWhiteSpace(Model.ItemCode))
    {
        DescripcioProduto = Model.LargeDescription.Replace("\r\n", "").Replace("\n", "").Replace("\r", "").Replace("\"", "''");
        ViewData["Title"] = "Detalle del producto: " + Model.ItemCode;
    }
}
@if (string.IsNullOrEmpty(Model.ItemCode) || string.IsNullOrWhiteSpace(Model.ItemCode))
{
    <div class="row">
        <div class="col-lg-12">
            <form asp-action="Detalle" method="get">
                <div class="d-flex wd-300">
                    <div class="form-group mg-b-0">
                        <label>Código del producto</label>
                        <input type="text" name="id" class="form-control form-control-sm wd-250" placeholder="introduce" required>
                    </div><!-- form-group -->
                    <div class="mg-l-10 mg-t-25 pd-t-4">
                        <button type="submit" class="btn btn-sm btn-info">Buscar</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
}
else
{
<div id="app_productoDetalle">

    <div class="br-section-wrapper">
        <div class="table-wrapper">
            <table class="table table-hover table-custom spacing5">
                <tr>
                    <td><strong>Codigo</strong></td>
                    <td colspan="1">@Html.DisplayFor(model => model.ItemCode)</td>
                    <td><strong>Nombre</strong></td>
                    <td colspan="1">@Html.DisplayFor(model => model.Description)</td>
                </tr>
                <tr>
                    <td><strong>Descripcion</strong></td>
                    <td>@Model.IdDescripcionLarga</td>
                    <td colspan="2">
                        <textarea style="display:none" class="form-control" id="Pro_largeDescription">@Html.DisplayFor(model => model.LargeDescription)</textarea>
                        @if (new EcommerceAdmin.Models.Ecom_SAP().ValidAction(UserId, new int[] { 4 }))
                        {
                            <div v-if="controls.EditLargeDescription == false">
                                {{ item.largeDescription }}
                                @*<button class="btn btn-sm btn-secondary" v-on:click="controls.EditLargeDescription = true; item.largeDescription2 = item.largeDescription">Editar</button>*@
                                <button class="btn btn-sm btn-secondary" v-on:click="editDescripcion()">Editar</button>
                                <button class="btn btn-sm btn-secondary" v-on:click="verdescripciones()">Cambiar por otra</button>
                            </div>
                            <div v-if="controls.EditLargeDescription == true">
                                <div class="form-group">
                                    <textarea class="form-control" v-model="item.largeDescription2">@Html.DisplayFor(model => model.LargeDescription)</textarea>
                                    <button class="btn btn-sm btn-secondary" v-on:click="controls.EditLargeDescription = false">Cancelar</button>
                                    <button class="btn btn-sm btn-success" v-on:click="UpdateLargeDesc()">Guardar</button>
                                </div>
                            </div>
                        }
                        else
                        {
                            @Html.DisplayFor(model => model.LargeDescription)
                        }
                    </td>
                </tr>
                <tr>
                    <td><strong>Descripcion CEO</strong></td>
                    <td colspan="3">@Html.Raw( Model.Ecom_ProductoDescripcion_.DescripcionCEO.Length >= 100 ? Model.Ecom_ProductoDescripcion_.DescripcionCEO.Substring(0,100) : Model.Ecom_ProductoDescripcion_.DescripcionCEO)<span>...</span></td>
                </tr>
                <tr>
                    <td><strong>Categoria</strong></td>
                    <td colspan="1">@Html.DisplayFor(model => model.Category.Description)</td>
                    <td><strong>Sub categoria</strong></td>
                    <td colspan="1">@Html.DisplayFor(model => model.SubCategory.Description)</td>
                </tr>
                <tr>
                    <td><strong>Precio</strong></td>
                    <td colspan="1">$@Model.UnitPrice.ToString("0.###")</td>
                    <td><strong>Descuento</strong></td>
                    <td colspan="1">
                        @if (Model.Discount < 0)
                        {
                            <span>No se aplica descuento</span>
                        }
                        else
                        {
                            <span>@Html.DisplayFor(model => model.Discount)%</span>
                        }
                    </td>
                </tr>
                <tr>
                    <td><strong>Stock</strong></td>
                    <td colspan="1">@Html.DisplayFor(model => model.Stock)</td>
                    <td><strong>Activo en ecommerce</strong></td>
                    <td colspan="1">
                        @if (new EcommerceAdmin.Models.Ecom_SAP().ValidAction(UserId, new int[] { 2 }))
                        {
                            <button v-if=" item.isActiveEcomerce == false" v-on:click="UpdateActive()" class="btn btn-sm btn-outline-success my-2 my-sm-0">Activar</button>
                            <button v-if=" item.isActiveEcomerce == true" v-on:click="UpdateDesactive()" class="btn btn-sm btn-outline-danger my-2 my-sm-0">Desactivar</button>
                        }
                        else
                        {
                            @Html.DisplayFor(model => model.IsActiveEcomerce)
                        }
                    </td>
                </tr>
            </table>
            <div class="col-xl-12">
                <div class="card bd">
                    <div class="card-header bd-b">
                        <ul class="nav nav-outline active-info flex-column flex-md-row">
                            <li class="nav-item">
                                <a class="nav-link active" id="home-tab" data-toggle="tab" href="#home" role="tab" aria-controls="home" aria-selected="true">Imagenes producto</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="profile-tab" data-toggle="tab" href="#desccipcion" role="tab" aria-controls="profile" aria-selected="false">Descripción</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="contact-tab" data-toggle="tab" href="#profile" role="tab" aria-controls="contact" aria-selected="false">Información adicional</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="contact-tab" data-toggle="tab" href="#Miniatura" role="tab" aria-controls="contact" aria-selected="false">Miniatura</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="contact-tab" data-toggle="tab" href="#contact" role="tab" aria-controls="contact" aria-selected="false">Ficha tecnica</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="contact-tab" data-toggle="tab" href="#contact1" role="tab" aria-controls="contact" aria-selected="false">vista 360</a>
                            </li>
                        </ul>
                    </div><!-- card-header -->
                    <div class="card-body color-gray-lighter">
                        <div class="tab-content" id="myTabContent">
                            <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
                                <div v-if="images.Producto.isGetting === true">
                                    cargando imagenes del producto...
                                </div>
                                <div v-if="images.Producto.isGetting === false">
                                    <nav class="navbar navbar-light bg-light justify-content-between">
                                        <a class="navbar-brand">Producto: @Model.ItemCode</a>
                                        @if (new EcommerceAdmin.Models.Ecom_SAP().ValidAction(UserId, new int[] { 7 }))
                                        {
                                            <form class="form-inline">
                                                <button class="btn btn-outline-success my-2 my-sm-0" type="button" v-on:click="UpdateProductoImagenes()">Subir imagen</button>
                                            </form>
                                        }
                                    </nav>
                                    <div class="row">
                                        <div v-for="(image, index) in images.Producto.images">
                                            <div class="card bd-0 wd-xs-300">
                                                <img class="card-img-top img-fluid" :src="image.ruta" alt="Image">
                                                <div class="card-body bd bd-t-0">
                                                    {{ image.name }}
                                                    <center>
                                                        <div class="btn-group btn-group-sm " role="group" aria-label="Basic example">
                                                            @if (new EcommerceAdmin.Models.Ecom_SAP().ValidAction(UserId, new int[] { 7 }))
                                                            {
                                                                <button type="button" class="btn btn-secondary" v-on:click="DeleteProductoImagen(index)">Eliminar</button>
                                                                <button type="button" class="btn btn-secondary" v-on:click="RenameProductoImagen(index)">Rename</button>
                                                            }
                                                            <a :href="image.ruta" target="_blank" class="btn btn-secondary">Ver</a>
                                                        </div>
                                                    </center>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="desccipcion" role="tabpanel" aria-labelledby="profile-tab">
                                <div v-if="images.Descripcion.isGetting === true">
                                    cargando imagenes del producto...
                                </div>
                                <div v-if="images.Descripcion.isGetting === false">
                                    <nav class="navbar navbar-light bg-light justify-content-between">
                                        <a class="navbar-brand">Producto: @Model.ItemCode</a>
                                        @if (new EcommerceAdmin.Models.Ecom_SAP().ValidAction(UserId, new int[] { 6 }))
                                        {
                                            <form class="form-inline">
                                                <button class="btn btn-outline-success my-2 my-sm-0" type="button" v-on:click="UpdateDescripcionImagenes()">Subir imagen</button>
                                            </form>
                                        }

                                    </nav>
                                    <div class="row">
                                        <div v-for="(image, index) in images.Descripcion.images">
                                            <div class="card bd-0 wd-xs-300">
                                                <img class="card-img-top img-fluid" :src="image.ruta" alt="Image">
                                                <div class="card-body bd bd-t-0">
                                                    {{ image.name }}
                                                    <center>
                                                        <div class="btn-group btn-group-sm " role="group" aria-label="Basic example">
                                                            @if (new EcommerceAdmin.Models.Ecom_SAP().ValidAction(UserId, new int[] { 6 }))
                                                            {
                                                                <button type="button" class="btn btn-secondary" v-on:click="DeleteDescripcionImagen(index)">Eliminar</button>
                                                                <button type="button" class="btn btn-secondary" v-on:click="RenameDescripcionImagen(index)">Rename</button>
                                                            }
                                                            <a :href="image.ruta" target="_blank" class="btn btn-secondary">Ver</a>
                                                        </div>
                                                    </center>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="contact-tab">
                                <div v-if="images.InfoAdicional.isGetting === true">
                                    cargando imagenes del producto...
                                </div>
                                <div v-if="images.InfoAdicional.isGetting === false">
                                    <nav class="navbar navbar-light bg-light justify-content-between">
                                        <a class="navbar-brand">Producto: @Model.ItemCode</a>
                                        @if (new EcommerceAdmin.Models.Ecom_SAP().ValidAction(UserId, new int[] { 5 }))
                                        {
                                            <form class="form-inline">
                                                <button class="btn btn-outline-success my-2 my-sm-0" type="button" v-on:click="UpdateInfoAdicionalImagenes()">Subir imagen</button>
                                            </form>
                                        }

                                    </nav>
                                    <div class="row">
                                        <div v-for="(image, index) in images.InfoAdicional.images">
                                            <div class="card bd-0 wd-xs-300">
                                                <img class="card-img-top img-fluid" :src="image.ruta" alt="Image">
                                                <div class="card-body bd bd-t-0">
                                                    {{ image.name }}
                                                    <center>
                                                        <div class="btn-group btn-group-sm " role="group" aria-label="Basic example">
                                                            @if (new EcommerceAdmin.Models.Ecom_SAP().ValidAction(UserId, new int[] { 5 }))
                                                            {
                                                                <button type="button" class="btn btn-secondary" v-on:click="DeleteInfoAdicionalImagen(index)">Eliminar</button>
                                                                <button type="button" class="btn btn-secondary" v-on:click="RenameInfoAdicionalImagen(index)">Rename</button>
                                                            }
                                                            <a :href="image.ruta" target="_blank" class="btn btn-secondary">Ver</a>
                                                        </div>
                                                    </center>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="Miniatura" role="tabpanel" aria-labelledby="contact-tab">
                                <div v-if="images.Miniatura.isGetting === true">
                                    cargando imagenes del producto...
                                </div>
                                <div v-if="images.Miniatura.isGetting === false">
                                    <nav class="navbar navbar-light bg-light justify-content-between">
                                        <a class="navbar-brand">Producto: @Model.ItemCode</a>
                                        @if (new EcommerceAdmin.Models.Ecom_SAP().ValidAction(UserId, new int[] { 26 }))
                                        {
                                            <form class="form-inline">
                                                <button class="btn btn-outline-success my-2 my-sm-0" type="button" v-on:click="UpdateMiniaturaImagenes()">Subir imagen</button>
                                            </form>
                                        }

                                    </nav>
                                    <div class="row">
                                        <div v-for="(image, index) in images.Miniatura.images">
                                            <div class="card bd-0 wd-xs-300">
                                                <img class="card-img-top img-fluid" :src="image.ruta" alt="Image">
                                                <div class="card-body bd bd-t-0">
                                                    {{ image.name }}
                                                    <center>
                                                        <div class="btn-group btn-group-sm " role="group" aria-label="Basic example">
                                                            @if (new EcommerceAdmin.Models.Ecom_SAP().ValidAction(UserId, new int[] { 26 }))
                                                            {
                                                                <button type="button" class="btn btn-secondary" v-on:click="DeleteMiniaturaImagen(index)">Eliminar</button>
                                                                <button type="button" class="btn btn-secondary" v-on:click="RenameMiniaturaImagen(index)">Rename</button>
                                                            }
                                                            <a :href="image.ruta" target="_blank" class="btn btn-secondary">Ver</a>
                                                        </div>
                                                    </center>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="contact" role="tabpanel" aria-labelledby="contact-tab">
                                @if (Model.FichaTecnica == null)
                                {
                                    <nav class="navbar navbar-light bg-light justify-content-between">
                                        <a class="navbar-brand">Producto: @Model.ItemCode no tiene ficha técnica</a>
                                    </nav>
                                }
                                else
                                {
                                    <nav class="navbar navbar-light bg-light justify-content-between">
                                        <a class="navbar-brand">Producto: @Model.ItemCode</a>
                                        @if (new EcommerceAdmin.Models.Ecom_SAP().ValidAction(UserId, new int[] { 3 }))
                                        {
                                            <form class="form-inline">
                                                <button class="btn btn-outline-success my-2 my-sm-0" type="button" v-on:click="VerFichasTecnicas('')">Cambiar ficha técnica</button>
                                            </form>
                                        }
                                    </nav>
                                    <h3>Codigo de ficha técnica: @Model.FichaTecnica.Codigo</h3>
                                    @if (Model.FichaTecnica.Ruta.Length == 0)
                                    {
                                        <h3>No cuenta con ficha técnica</h3>
                                    }
                                    else
                                    {
                                        @*@Html.Raw(string.Format("{0}/store/public/images/img_spl/{1}.pdf",System.Configuration.ConfigurationManager.AppSettings["Ecommerce_Domain"],Model.FichaTecnica.Ruta))*@
                                        <div class="embed-responsive embed-responsive-16by9">
                                            <iframe class="embed-responsive-item" src="@Html.Raw(string.Format("{0}/store/public/images/img_spl/{1}.pdf",System.Configuration.ConfigurationManager.AppSettings["Ecommerce_Domain"],Model.FichaTecnica.Ruta))" type="application/pdf" allowfullscreen></iframe>
                                        </div>
                                    }
                                }
                            </div>
                            <div class="tab-pane fade" id="contact1" role="tabpanel" aria-labelledby="contact-tab">
                                <nav class="navbar navbar-light bg-light justify-content-between">
                                    <a class="navbar-brand">Producto: @Model.ItemCode vista 360</a>
                                    <form class="form-inline">
                                        @if (new EcommerceAdmin.Models.Ecom_SAP().ValidAction(UserId, new int[] { 49 }))
                                        {
                                            <button class="btn btn-outline-success my-2 my-sm-0" type="button" v-on:click="Cambiar360()">Cambiar vista 360</button>
                                            <button class="btn btn-outline-success my-2 my-sm-0" type="button" v-on:click="Delete360()">Eliminar vista 360</button>
                                        }

                                    </form>
                                </nav>
                                <div class="embed-responsive embed-responsive-16by9">
                                    <iframe class="embed-responsive-item" src="@Html.Raw(string.Format("{0}/store/public/images/img_spl/productos/{1}/360/{1}.html",System.Configuration.ConfigurationManager.AppSettings["Ecommerce_Domain"],Model.ItemCode))" type="application/pdf" allowfullscreen></iframe>
                                </div>
                            </div>
                        </div>
                    </div><!-- card-body -->
                </div>
            </div>
        </div>
    </div>

    <div id="modal_descripciones" class="modal fade">
        <div class="modal-dialog modal-lg" style="width: 80%; max-width:80%;" role="document">
            <div class="modal-content tx-size-sm">
                <div class="modal-header pd-x-20">
                    <h6 class="tx-14 mg-b-0 tx-uppercase tx-inverse tx-bold">Descripciones</h6>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" v-on:click="CloseModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body pd-20" id="modal_DireccionFacturacion_body">
                    
                    <table class="table table-sm  table-striped" id="tabla_descripciones">
                        <thead>
                            <tr>
                                <th style="width: 30px !important;">Codigo</th>
                                <th>Descripcion</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-if="Descripciones.length" v-for="(item, index) in Descripciones">
                                <td style="width: 30px !important;">{{ item.codigo }}</td>
                                <td>{{ item.descripcion }}</td>
                                <td><button class="btn btn-sm btn-secondary" v-on:click="CambiarDescripcion(item.codigo)">Cambiar</button></td>
                            </tr>
                        </tbody>
                    </table>
                </div><!-- modal-body -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary pd-x-20" data-dismiss="modal" v-on:click="CloseModal()">Close</button>
                </div>
            </div>
        </div><!-- modal-dialog -->
    </div><!-- modal -->
    <div id="modal_fichasTecnicas" class="modal fade">
        <div class="modal-dialog modal-lg" style="width: 80%; max-width:80%;" role="document">
            <div class="modal-content tx-size-sm">
                <div class="modal-header pd-x-20">
                    <h6 class="tx-14 mg-b-0 tx-uppercase tx-inverse tx-bold">Descripciones</h6>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" >
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body pd-20" id="">
                    <button v-if="FichasTecnicasFolder > 0 " v-on:click="FichasTecnicas.splice(FichasTecnicasFolder,1); FichasTecnicasFolder = FichasTecnicasFolder - 1;" class="btn btn-sm btn primary">Forlder anterior</button>
                    <table  class="table display responsive nowrap " id="table_app_blog" style="width: 100%;">
                        <thead>
                            <tr>
                                <th class="tx-10-force tx-mont tx-medium">Name</th>
                                <th class="tx-10-force tx-mont tx-medium hidden-xs-down">DB</th>
                                <th class="wd-5p"></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-if="FichasTecnicas.length" v-for="(item, index) in FichasTecnicas[FichasTecnicasFolder]">
                                <td>
                                    <i v-if="item.isDirectory == true" class="icon ion-ios-folder-outline tx-24 tx-warning lh-0 valign-middle"></i>
                                    <i v-if="item.isDirectory == false" class="fa fa-file-pdf-o tx-22 tx-danger lh-0 valign-middle"></i>
                                    <span class="pd-l-5"> <a href="#" v-on:click="VerFichasTecnicas(item.path)">{{ item.name }}</a> </span>
                                </td>
                                <td class="hidden-xs-down">
                                    <span v-if="item.objecto != null">Ok</span>
                                    <span v-if="item.objecto == null">---</span>
                                </td>
                                <td class="dropdown">
                                    <a href="#" data-toggle="dropdown" class="btn pd-y-3 tx-gray-500 hover-info"><i class="icon ion-more"></i></a>
                                    <div class="dropdown-menu dropdown-menu-right pd-10">
                                        <nav class="nav nav-style-1 flex-column">
                                            <a href="#" v-if="item.objecto != null" v-on:click="SeleccionarFicha(item.objecto.codigo)" class="nav-link">Seleccionar</a>
                                        </nav>
                                    </div><!-- dropdown-menu -->
                                </td>
                            </tr>

                        </tbody>
                    </table>
                </div><!-- modal-body -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary pd-x-20" data-dismiss="modal" >Close</button>
                </div>
            </div>
        </div><!-- modal-dialog -->
    </div><!-- modal -->
</div>
    @section Scripts {
        <script>
        var app_productoDetalle = new Vue({
            el: "#app_productoDetalle",
            data: {
                serverToken: {
                    'RequestVerificationToken': document.querySelector("input[name=__RequestVerificationToken]").value
                },
                controls: {
                    EditLargeDescription: false,
                    isGettingFichas: false
                },
                item: {
                    Code: "@Model.ItemCode",
                    largeDescription: "@Html.Raw(DescripcioProduto)",
                    largeDescription2: "@Html.Raw(DescripcioProduto)",
                    isActiveEcomerce: ("@Model.IsActiveEcomerce" == "True" ? true : false),
                },
                images: {
                    Producto: {
                        images: [],
                        isGetting: true
                    },
                    Descripcion: {
                        images: [],
                        isGetting: true
                    },
                    InfoAdicional: {
                        images: [],
                        isGetting: true
                    },
                    Miniatura: {
                        images: [],
                        isGetting: true
                    },

                },
                Descripciones: [],
                FichasTecnicas: [],
                FichasTecnicasFolder: -1,
                fichatecnicaRuta: ""
            },
            async mounted() {
                await this.GetProductoImagenes();
                await this.GetDescripcionImagenes();
                await this.GetInfoAdicionalImagenes();
                await this.GetMiniaturaImagenes();

            },
            methods: {
                editDescripcion: function () {
                    var myWindow = window.open('@Url.Action("Editt","DescripcionesProducto")' + '/@Model.IdDescripcionLarga', "MsgWindow", "width=1100,height=900");
                    myWindow.onunload = function () {
                        console.log("se ha cargado la apgina");
                        //app_precio.GetDistribuidorPrecar();
                    }
                    myWindow.focus();
                },
                SeleccionarFicha: async function (fichaTecnicaCodigo) {
                    Swal.fire({
                        title: "¿Deseas camiar la ficha ténica?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si!'
                    }).then((result) => {
                        if (result.value) {
                            var params = new URLSearchParams();
                            params.append('Codigoficha', '' + fichaTecnicaCodigo);
                            params.append('ItemCode', '' + this.item.Code);
                            axios.post('@Url.Action("DataCambiarFichaTecnicaAsync","Producto")', params,{ headers: this.serverToken }).then(response => {
                                this.ShowMessageErrorShort(response.data, 'success')
                                location.reload();
                            }).catch(error => {
                                this.ShowMessageErrorShort(error.response.data,'error')
                            }).finally(() => this.images.Producto.isGetting = false)
                        }
                    })
                },
                VerFichasTecnicas: async function (ruta) {
                    this.controls.isGettingFichas = true
                    this.ShowMessageErrorShort("Por favor espera mientras se obtienen los archivos...",'success')
                    if (ruta == "") {
                        this.FichasTecnicasFolder = -1;
                    }
                    this.FichasTecnicasFolder = this.FichasTecnicasFolder + 1
                    var params = new URLSearchParams();
                    params.append('Folder', ruta);
                    this.fichatecnicaRuta = ruta
                    await axios.post('@Url.Action("DataList","FichaTecnica")', params, { headers: this.serverToken }).then(response => {
                        this.FichasTecnicas.push(response.data);
                        $("#modal_fichasTecnicas").modal("show")
                    }).catch(error => {
                        this.ShowMessageErrorShort(error.response.data, 'error')
                        this.FichasTecnicasFolder = this.FichasTecnicasFolder - 1
                    }).finally(() => this.controls.isGettingFichas = false)
                    $("#table_app_blog").DataTable();
                },
                CambiarDescripcion: async function (nuevaDescripcion) {
                     Swal.fire({
                        title: "¿Deseas camiar la descripción?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si!'
                    }).then((result) => {
                        if (result.value) {
                            var params = new URLSearchParams();
                            params.append('IdDescripcionLarga', '' + nuevaDescripcion);
                            params.append('ItemCode', '' + this.item.Code);
                            axios.post('@Url.Action("DataChangeDescription","Producto")', params,{ headers: this.serverToken }).then(response => {
                                 this.ShowMessageErrorShort(response.data,'success')
                            }).catch(error => {
                                this.ShowMessageErrorShort(error.response.data,'error')
                            }).finally(() => this.images.Producto.isGetting = false)
                        }
                    })
                },
                verdescripciones: async function () {
                    await axios.post('@Url.Action("DataGet","DescripcionesProducto")',null,{ headers: this.serverToken }).then(response => {
                        this.Descripciones = response.data;
                        $("#modal_descripciones").modal("show")
                    }).catch(error => {
                        this.ShowMessageErrorShort(error.response.data,'error')
                    }).finally(() => this.images.Producto.isGetting = false)
                    $('#tabla_descripciones').DataTable();
                },
                UpdateActive: async function () {
                    var params = new URLSearchParams();
                    params.append('Active', true);
                    params.append('ItemCode', '' + this.item.Code);
                    axios.post('@Url.Action("DataDesactiveActive","Producto")', params,{ headers: this.serverToken }).then(response => {
                        this.ShowMessageErrorShort(response.data, 'success')
                        this.item.isActiveEcomerce = true;
                    }).catch(error => {
                        this.ShowMessageErrorShort(error.response.data,'error')
                    }).finally(() => this.images.Producto.isGetting = false)
                },
                UpdateDesactive: async function () {
                    var params = new URLSearchParams();
                    params.append('Active', false);
                    params.append('ItemCode', '' + this.item.Code);
                    axios.post('@Url.Action("DataDesactiveActive","Producto")', params,{ headers: this.serverToken }).then(response => {
                        this.ShowMessageErrorShort(response.data, 'success')
                        this.item.isActiveEcomerce = false;
                    }).catch(error => {
                        this.ShowMessageErrorShort(error.response.data,'error')
                    }).finally(() => this.images.Producto.isGetting = false)
                },
                UpdateLargeDesc: async function () {

                     Swal.fire({
                        title: "¿Deseas guardar los cambios, esto puede afectar varios productos?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, actualizalo!'
                    }).then((result) => {
                        if (result.value) {
                            var params = new URLSearchParams();
                            params.append('LargeDescription', '' + this.item.largeDescription2);
                            params.append('ItemCode', '' + this.item.Code);
                            axios.post('@Url.Action("DataChangeLargeDescr","Producto")', params,{ headers: this.serverToken }).then(response => {
                                this.ShowMessageErrorShort(response.data, 'success')
                                this.controls.EditLargeDescription = false;
                                this.item.largeDescription = this.item.largeDescription2;
                            }).catch(error => {
                                this.ShowMessageErrorShort(error.response.data,'error')
                            }).finally(() => this.images.Producto.isGetting = false)
                        }
                    })
                },
                RenameProductoImagen: async function (index) {
                    Swal.fire({
                        title: 'Nuevo nombre del archivo',
                        input: 'text',
                        inputAttributes: {
                            autocapitalize: 'off'
                        },
                        showCancelButton: true,
                        confirmButtonText: 'Renombrar',
                        showLoaderOnConfirm: true,
                        preConfirm: (login) => {
                            var params = new URLSearchParams();
                            params.append('Filename', '' + this.images.Producto.images[index].name);
                            params.append('Newname', '' + login);
                            params.append('ItemCode', '' + this.item.Code);
                            params.append('ImagessType', 'Producto');
                            return axios.post('@Url.Action("DataRenameFiles","Producto")', params,{ headers: this.serverToken }).then(response => {
                                this.images.Producto.images[index].ruta = this.images.Producto.images[index].ruta.replace(this.images.Producto.images[index].name,login + ".jpg");
                                this.images.Producto.images[index].name = login + ".jpg";
                                return response.data;
                            }).catch(error => {
                                this.ShowMessageErrorShort(error.response.data,'error')
                            })
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        if (result.value) {
                            this.ShowMessageErrorShort(result.value,'success')
                        }
                        console.log(result)
                    })
                },
                RenameDescripcionImagen: async function (index) {
                    Swal.fire({
                        title: 'Nuevo nombre del archivo',
                        input: 'text',
                        inputAttributes: {
                            autocapitalize: 'off'
                        },
                        showCancelButton: true,
                        confirmButtonText: 'Renombrar',
                        showLoaderOnConfirm: true,
                        preConfirm: (login) => {
                            var params = new URLSearchParams();
                            params.append('Filename', '' + this.images.Descripcion.images[index].name);
                            params.append('Newname', '' + login);
                            params.append('ItemCode', '' + this.item.Code);
                            params.append('ImagessType', 'Descripcion');
                            return axios.post('@Url.Action("DataRenameFiles","Producto")', params,{ headers: this.serverToken }).then(response => {
                                this.images.Descripcion.images[index].ruta = this.images.Descripcion.images[index].ruta.replace(this.images.Descripcion.images[index].name,login + ".jpg");
                                this.images.Descripcion.images[index].name = login + ".jpg";
                                return response.data;
                            }).catch(error => {
                                this.ShowMessageErrorShort(error.response.data,'error')
                            })
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        if (result.value) {
                            this.ShowMessageErrorShort(result.value,'success')
                        }
                        console.log(result)
                    })
                },
                RenameInfoAdicionalImagen: async function (index) {
                    Swal.fire({
                        title: 'Nuevo nombre del archivo',
                        input: 'text',
                        inputAttributes: {
                            autocapitalize: 'off'
                        },
                        showCancelButton: true,
                        confirmButtonText: 'Renombrar',
                        showLoaderOnConfirm: true,
                        preConfirm: (login) => {
                            var params = new URLSearchParams();
                            params.append('Filename', '' + this.images.InfoAdicional.images[index].name);
                            params.append('Newname', '' + login);
                            params.append('ItemCode', '' + this.item.Code);
                            params.append('ImagessType', 'InfoAdicional');
                            return axios.post('@Url.Action("DataRenameFiles","Producto")', params,{ headers: this.serverToken }).then(response => {
                                this.images.InfoAdicional.images[index].ruta = this.images.InfoAdicional.images[index].ruta.replace(this.images.InfoAdicional.images[index].name,login + ".jpg");
                                this.images.InfoAdicional.images[index].name = login + ".jpg";
                                return response.data;
                            }).catch(error => {
                                this.ShowMessageErrorShort(error.response.data,'error')
                            })
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        if (result.value) {
                            this.ShowMessageErrorShort(result.value,'success')
                        }
                        console.log(result)
                    })
                },
                RenameMiniaturaImagen: async function (index) {
                    Swal.fire({
                        title: 'Nuevo nombre del archivo',
                        input: 'text',
                        inputAttributes: {
                            autocapitalize: 'off'
                        },
                        showCancelButton: true,
                        confirmButtonText: 'Renombrar',
                        showLoaderOnConfirm: true,
                        preConfirm: (login) => {
                            var params = new URLSearchParams();
                            params.append('Filename', '' + this.images.Miniatura.images[index].name);
                            params.append('Newname', '' + login);
                            params.append('ItemCode', '' + this.item.Code);
                            params.append('ImagessType', 'Miniatura');
                            return axios.post('@Url.Action("DataRenameFiles","Producto")', params,{ headers: this.serverToken }).then(response => {
                                this.images.Miniatura.images[index].ruta = this.images.Miniatura.images[index].ruta.replace(this.images.Miniatura.images[index].name,login + ".jpg");
                                this.images.Miniatura.images[index].name = login + ".jpg";
                                return response.data;
                            }).catch(error => {
                                this.ShowMessageErrorShort(error.response.data,'error')
                            })
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        if (result.value) {
                            this.ShowMessageErrorShort(result.value,'success')
                        }
                        console.log(result)
                    })
                },
                DeleteProductoImagen: async function (index) {
                    Swal.fire({
                        title: "¿Deseas eliminar este archivo?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, eliminalo!'
                    }).then((result) => {
                        if (result.value) {
                            var params = new URLSearchParams();
                            params.append('Filename', '' + this.images.Producto.images[index].name);
                            params.append('ItemCode', '' + this.item.Code);
                            params.append('ImagessType', 'Producto');
                            axios.post('@Url.Action("DataDeleteFiles","Producto")', params,{ headers: this.serverToken }).then(response => {
                                 this.ShowMessageErrorShort(response.data,'success')
                                this.images.Producto.images.splice(index, 1);
                            }).catch(error => {
                                this.ShowMessageErrorShort(error.response.data,'error')
                            }).finally(() => this.images.Producto.isGetting = false)
                        }
                    })
                },
                DeleteDescripcionImagen: async function (index) {
                    Swal.fire({
                        title: "¿Deseas eliminar este archivo?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, eliminalo!'
                    }).then((result) => {
                        if (result.value) {
                            var params = new URLSearchParams();
                            params.append('Filename', '' + this.images.Descripcion.images[index].name);
                            params.append('ItemCode', '' + this.item.Code);
                            params.append('ImagessType', 'Descripcion');
                            axios.post('@Url.Action("DataDeleteFiles","Producto")', params,{ headers: this.serverToken }).then(response => {
                                 this.ShowMessageErrorShort(response.data,'success')
                                this.images.Descripcion.images.splice(index, 1);
                            }).catch(error => {
                                this.ShowMessageErrorShort(error.response.data,'error')
                            }).finally(() => this.images.Descripcion.isGetting = false)
                        }
                    })
                },
                DeleteInfoAdicionalImagen: async function (index) {
                    Swal.fire({
                        title: "¿Deseas eliminar este archivo?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, eliminalo!'
                    }).then((result) => {
                        if (result.value) {
                            var params = new URLSearchParams();
                            params.append('Filename', '' + this.images.InfoAdicional.images[index].name);
                            params.append('ItemCode', '' + this.item.Code);
                            params.append('ImagessType', 'InfoAdicional');
                            axios.post('@Url.Action("DataDeleteFiles","Producto")', params,{ headers: this.serverToken }).then(response => {
                                 this.ShowMessageErrorShort(response.data,'success')
                                this.images.InfoAdicional.images.splice(index, 1);
                            }).catch(error => {
                                this.ShowMessageErrorShort(error.response.data,'error')
                            }).finally(() => this.images.InfoAdicional.isGetting = false)
                        }
                    })
                },
                DeleteMiniaturaImagen: async function (index) {
                    Swal.fire({
                        title: "¿Deseas eliminar este archivo?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, eliminalo!'
                    }).then((result) => {
                        if (result.value) {
                            var params = new URLSearchParams();
                            params.append('Filename', '' + this.images.Miniatura.images[index].name);
                            params.append('ItemCode', '' + this.item.Code);
                            params.append('ImagessType', 'Miniatura');
                            axios.post('@Url.Action("DataDeleteFiles","Producto")', params,{ headers: this.serverToken }).then(response => {
                                 this.ShowMessageErrorShort(response.data,'success')
                                this.images.Miniatura.images.splice(index, 1);
                            }).catch(error => {
                                this.ShowMessageErrorShort(error.response.data,'error')
                            }).finally(() => this.images.Miniatura.isGetting = false)
                        }
                    })
                },
                Delete360: async function () {
                     Swal.fire({
                        title: "¿Deseas eliminar vista 360?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, eliminalo!'
                    }).then((result) => {
                        if (result.value) {
                            axios.get('@Html.Raw(string.Format("{0}/store/models/PublicApi/UnzipFile.php?ItemCode={1}&Process=delete",System.Configuration.ConfigurationManager.AppSettings["Ecommerce_Domain"],Model.ItemCode))', null,null).then(response => {
                                this.ShowMessageErrorShort(response.data,'success')
                            }).catch(error => {
                                this.ShowMessageErrorShort(error.response.data,'error')
                            }).finally(() => this.images.Producto.isGetting = false)
                        }
                    })
                },
                Cambiar360: async function () {
                    Swal.fire({
                        title: 'Selecciona archivo .zip de tu vista 360',
                        input: 'file',
                        inputAttributes: {
                             'accept': 'zip,application/octet-stream,application/zip,application/x-zip,application/x-zip-compressed',
                            'aria-label': 'Cambia vista 360'
                        },
                        showCancelButton: true,
                        confirmButtonText: 'Ok!',
                        showLoaderOnConfirm: true,
                        preConfirm: async (file) => {
                            if (file) {
                                let params = new FormData();
                                    params.append('FormFile', file);
                                    params.append('ItemCode', "@Model.ItemCode");
                                    params.append('ImagessType', '360' );
                                await axios.post('@Url.Action("DataUploadFiles","Producto")', params, { headers: this.serverToken }).then(response => {
                                    return response.data
                                }).catch(error => {
                                    Swal.showValidationMessage(`Error: ${error.response.data}`)
                                }).finally(() => this.images.Miniatura.isGetting = false)
                            }
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        if (result.value) {
                            Swal.fire({
                                title: "Archivo zip cargado",
                            })
                            this.UnzipFile()
                        }
                    })
                },
                UpdateProductoImagenes: async function () {
                    const { value: file } = await Swal.fire({
                        title: 'Select image',
                        input: 'file',
                        inputAttributes: {
                            'accept': 'image/*',
                            'aria-label': 'Upload your profile picture'
                        }
                    })
                    if (file) {
                        let params = new FormData();
                            params.append('FormFile', file);
                            params.append('ItemCode', '' + this.item.Code);
                            params.append('ImagessType', 'Producto' );
                        await axios.post('@Url.Action("DataUploadFiles","Producto")', params, { headers: this.serverToken }).then(response => {
                            this.ShowMessageErrorShort(response.data,'success')
                            this.GetProductoImagenes();
                            const reader = new FileReader()
                            reader.onload = (e) => {
                                Swal.fire({
                                    title: 'Your uploaded picture',
                                    imageUrl: e.target.result,
                                    imageAlt: 'The uploaded picture'
                                })
                            }
                            reader.readAsDataURL(file)
                        }).catch(error => {
                            this.ShowMessageErrorShort(error.response.data,'error')
                        }).finally(() => this.images.Producto.isGetting = false)
                    }
                },
                UpdateDescripcionImagenes: async function () {
                    const { value: file } = await Swal.fire({
                        title: 'Select image',
                        input: 'file',
                        inputAttributes: {
                            'accept': 'image/*',
                            'aria-label': 'Upload your profile picture'
                        }
                    })
                    if (file) {
                        let params = new FormData();
                            params.append('FormFile', file);
                            params.append('ItemCode', '' + this.item.Code);
                            params.append('ImagessType', 'Descripcion' );
                        await axios.post('@Url.Action("DataUploadFiles","Producto")', params, { headers: this.serverToken }).then(response => {
                            this.ShowMessageErrorShort(response.data,'success')

                            this.GetDescripcionImagenes();
                            const reader = new FileReader()
                            reader.onload = (e) => {
                                Swal.fire({
                                    title: 'Your uploaded picture',
                                    imageUrl: e.target.result,
                                    imageAlt: 'The uploaded picture'
                                })
                            }
                            reader.readAsDataURL(file)
                        }).catch(error => {
                            this.ShowMessageErrorShort(error.response.data,'error')
                        }).finally(() => this.images.Producto.isGetting = false)
                    }
                },
                UpdateInfoAdicionalImagenes: async function () {
                    const { value: file } = await Swal.fire({
                        title: 'Select image',
                        input: 'file',
                        inputAttributes: {
                            'accept': 'image/*',
                            'aria-label': 'Upload your profile picture'
                        }
                    })
                    if (file) {
                        let params = new FormData();
                            params.append('FormFile', file);
                            params.append('ItemCode', '' + this.item.Code);
                            params.append('ImagessType', 'InfoAdicional' );
                        await axios.post('@Url.Action("DataUploadFiles","Producto")', params, { headers: this.serverToken }).then(response => {
                            this.ShowMessageErrorShort(response.data,'success')
                            this.GetInfoAdicionalImagenes();
                            const reader = new FileReader()
                            reader.onload = (e) => {
                                Swal.fire({
                                    title: 'Your uploaded picture',
                                    imageUrl: e.target.result,
                                    imageAlt: 'The uploaded picture'
                                })
                            }
                            reader.readAsDataURL(file)
                        }).catch(error => {
                            this.ShowMessageErrorShort(error.response.data,'error')
                        }).finally(() => this.images.Producto.isGetting = false)
                    }
                },
                UpdateMiniaturaImagenes: async function () {
                    const { value: file } = await Swal.fire({
                        title: 'Select image',
                        input: 'file',
                        inputAttributes: {
                            'accept': 'image/*',
                            'aria-label': 'Upload your profile picture'
                        }
                    })
                    if (file) {
                        let params = new FormData();
                            params.append('FormFile', file);
                            params.append('ItemCode', '' + this.item.Code);
                            params.append('ImagessType', 'Miniatura' );
                        await axios.post('@Url.Action("DataUploadFiles","Producto")', params, { headers: this.serverToken }).then(response => {
                            this.ShowMessageErrorShort(response.data,'success')
                            this.GetMiniaturaImagenes();
                            const reader = new FileReader()
                            reader.onload = (e) => {
                                Swal.fire({
                                    title: 'Your uploaded picture',
                                    imageUrl: e.target.result,
                                    imageAlt: 'The uploaded picture'
                                })
                            }
                            reader.readAsDataURL(file)
                        }).catch(error => {
                            this.ShowMessageErrorShort(error.response.data,'error')
                        }).finally(() => this.images.Miniatura.isGetting = false)
                    }
                },
                GetProductoImagenes: async function () {
                    var params = new URLSearchParams();
                    params.append('ItemCode', '' + this.item.Code);
                    params.append('ImagessType', 'Producto');
                    await axios.post('@Url.Action("DataGetFiles","Producto")',params,{ headers: this.serverToken }).then(response => {
                        this.images.Producto.images = response.data;
                    }).catch(error => {
                        this.ShowMessageErrorShort(error.response.data,'error')
                    }).finally(() => this.images.Producto.isGetting = false)
                },
                GetDescripcionImagenes: async function () {
                    var params = new URLSearchParams();
                    params.append('ItemCode', '' + this.item.Code);
                    params.append('ImagessType', 'Descripcion');
                    await axios.post('@Url.Action("DataGetFiles","Producto")',params,{ headers: this.serverToken }).then(response => {
                        this.images.Descripcion.images = response.data;
                    }).catch(error => {
                       this.ShowMessageErrorShort(error.response.data,'error')
                    }).finally(() => this.images.Descripcion.isGetting = false)
                },
                GetInfoAdicionalImagenes: async function () {
                    var params = new URLSearchParams();
                    params.append('ItemCode', '' + this.item.Code);
                    params.append('ImagessType', 'InfoAdicional');
                    await axios.post('@Url.Action("DataGetFiles","Producto")',params,{ headers: this.serverToken }).then(response => {
                        this.images.InfoAdicional.images = response.data;
                    }).catch(error => {
                        this.ShowMessageErrorShort(error.response.data,'error')
                    }).finally(() => this.images.InfoAdicional.isGetting = false)
                },
                GetMiniaturaImagenes: async function () {
                    var params = new URLSearchParams();
                    params.append('ItemCode', '' + this.item.Code);
                    params.append('ImagessType', 'Miniatura');
                    await axios.post('@Url.Action("DataGetFiles","Producto")',params,{ headers: this.serverToken }).then(response => {
                        this.images.Miniatura.images = response.data;
                    }).catch(error => {
                        this.ShowMessageErrorShort(error.response.data,'error')
                    }).finally(() => this.images.Miniatura.isGetting = false)
                },
                UnzipFile: async function () {
                    axios.get('@Html.Raw(string.Format("{0}/store/models/PublicApi/UnzipFile.php?ItemCode={1}&Process=unzip",System.Configuration.ConfigurationManager.AppSettings["Ecommerce_Domain"],Model.ItemCode))', null,null).then(response => {
                            this.ShowMessageErrorShort(response.data,'success')
                    }).catch(error => {
                        this.ShowMessageErrorShort(error.response.data,'error')
                    }).finally(() => this.images.Producto.isGetting = false)
                },
                ShowMessageError: function (text) {
                    Swal.fire({
                        title: 'Error!',
                        text: text,
                        icon: 'error',
                        confirmButtonText: 'Ok'
                    })
                },
                ShowMessageErrorShort: function (text,icon) {
                    const Toast = Swal.mixin({
                          toast: true,
                          position: 'top-end',
                          showConfirmButton: false,
                          timer: 4000,
                          timerProgressBar: true,
                          onOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                          }
                        })

                        Toast.fire({
                          icon: icon,
                          title: text
                        })
                },
                showConfirmDialog: async function (mensaje, callback) {

                }
            }
        });
        </script>
    }
}