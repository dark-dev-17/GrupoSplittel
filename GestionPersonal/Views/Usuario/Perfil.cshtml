@model GPSInformation.Models.Persona

@{
    ViewData["Title"] = "Editar perfil";

    GPSInformation.Models.InformacionMedica informacionMedica = new GPSInformation.Models.InformacionMedica() { IdPersona = Model.IdPersona };
    GPSInformation.Models.Empleado EmpleadoEmpleado = new GPSInformation.Models.Empleado() { IdPersona = Model.IdPersona, Ingreso = DateTime.Now };
    GPSInformation.Models.PersonaContacto PersonaContacto = new GPSInformation.Models.PersonaContacto() { IdPersona = Model.IdPersona };
}
<link href="~/template/lib/select2/css/select2.min.css" rel="stylesheet" />

<div class="d-flex align-items-center justify-content-between mg-b-30">
    <h4 class="tx-15 mg-b-0">@ViewData["Title"]</h4>
    <div class="btn-group" role="group" aria-label="Basic example">
        <a href="#modalActividadVacacionesPeriodos" data-toggle="modal" class="btn btn-sm btn-white d-flex align-items-center"><i class="icon ion-md-time mg-r-5 tx-16 lh--9"></i>Cambiar foto de perfil</a>
    </div>
</div>
<hr />
<ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item">
        <a class="nav-link active" id="home-tab" data-toggle="tab" href="#home" role="tab" aria-controls="home" aria-selected="true">Información personal</a>
    </li>
    <li class="nav-item">
        <a class="nav-link " id="profile-tab" data-toggle="tab" href="#profile" role="tab" aria-controls="profile" aria-selected="false">Información medica</a>
    </li>
    @*<li class="nav-item">
        <a class="nav-link " id="contact-tab" data-toggle="tab" href="#contact" role="tab" aria-controls="contact" aria-selected="false">Información del empleado</a>
    </li>*@
    <li class="nav-item">
        <a class="nav-link " id="tab_personacontacto-tab" data-toggle="tab" href="#tab_personacontacto" role="tab" aria-controls="tab_personacontacto" aria-selected="false">Persona de contacto</a>
    </li>
</ul>
<div class="tab-content bd bd-gray-300 bd-t-0 pd-20" id="App_editEmpleado">
    <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
        <div id="PersonaEdit">
            <partial name="../Persona/Edit" model="Model" />
        </div>
    </div>
    <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab">
        @if (ViewBag.InfoMedica == null)
        {
            <div class="alert alert-primary mg-b-0" role="alert">
                Sin información medica
            </div>
            <div id="CreateInformacionMedicaContent">
                <partial name="../InformacionMedica/Create" model="informacionMedica" />
            </div>
        }
        else
        {
            <div id="CreateInformacionMedicaContent">
                <partial name="../InformacionMedica/Edit" model="ViewBag.InfoMedica" />
            </div>
        }
    </div>
    <div class="tab-pane fade" id="contact" role="tabpanel" aria-labelledby="contact-tab">
        @if (ViewBag.InforEmpleado == null)
        {
            <div class="alert alert-primary mg-b-0" role="alert">
                Sin datos
            </div>
            <div id="CreateInfoEmpleadoContent">
                <partial name="../SplittelEmpleado/Create" model="EmpleadoEmpleado" />
            </div>
        }
        else
        {
            <div id="CreateInfoEmpleadoContent">
                <partial name="../SplittelEmpleado/Edit" model="ViewBag.InforEmpleado" />
            </div>
        }
    </div>
    <div class="tab-pane fade" id="tab_personacontacto" role="tabpanel" aria-labelledby="contact-tab">
        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item">
                <a class="nav-link" data-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">Agregar persona de contacto</a>
            </li>
        </ul>
        <div class="tab-content bd bd-gray-300 bd-t-0 pd-20" id="myTabContent">
            <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
                <div class="collapse mg-t-5" id="collapseExample">
                    <partial name="../PersonaContacto/Create" model="PersonaContacto" />
                </div>
            </div>
        </div>
        <form id="formGetContacts">
            <input type="hidden" name="id" value="@Model.IdPersona" />
        </form>
        <h4>Lista de contactos</h4>
        <div id="ListPersonasContacto">
            <partial name="../PersonaContacto/List" model="ViewBag.PersonaContacto" />
        </div>
    </div>
    <div class="modal calendar-modal-create fade effect-scale" id="modalActividadVacacionesPeriodos" role="dialog" data-backdrop="false" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body pd-20 pd-sm-30">
                    <button type="button" class="close pos-absolute t-20 r-20" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true"><i data-feather="x"></i></span>
                    </button>
                    <h5 class="tx-18 tx-sm-20 mg-b-20 mg-sm-b-30">Periodos de vacaciones</h5>

                    <div id="content_vacacionesAcitivitdssdfsdf">
                        <form asp-action="FotoPerfil" enctype="multipart/form-data">
                            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                            <div class="form-group">
                                <label  class="control-label">Foto</label>
                                <input type="file" name="foto" id="foto" class="form-control" />
                            </div>
                            <div class="form-group row mg-b-0">
                                <div class="col-sm-12 text-right">
                                    <a href="#" data-dismiss="modal" class="btn btn-sm btn-secondary">Cancelar</a>
                                    <button type="submit" class="btn btn-sm btn-primary">Guardar</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div><!-- modal-body -->
            </div><!-- modal-content -->
        </div><!-- modal-dialog -->
    </div><!-- modal -->
</div>
@Html.AntiForgeryToken()

@section Scripts {

    <script>
        $(document).ready(function() {

        });
    </script>
    <script>
        var App_editEmpleado = new Vue({
            el: "#App_editEmpleado",
            data: {
                serverToken: {
                    'RequestVerificationToken': document.querySelector("input[name=__RequestVerificationToken]").value
                },
            },
            mounted() {

            },
            methods: {
                ListContacto: function () {
                    axios.post('@Url.Action("List","PersonaContacto")', $('#formGetContacts').serialize(), null).then(response => {
                        document.getElementById("ListPersonasContacto").innerHTML = "";
                        document.getElementById("ListPersonasContacto").innerHTML = response.data;
                    }).catch(error => {
                        if (error.response) {
                            if (error.response.status === 400) {
                                document.getElementById("ListPersonasContacto").innerHTML = "";
                                document.getElementById("ListPersonasContacto").innerHTML = response.data;
                            }
                        }
                    }).finally()
                },
                createContacto: function () {
                    Swal.fire({
                        title: "¿Deseas guardar los cambios?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si!'
                    }).then((result) => {
                        if (result.value) {
                            axios.post('@Url.Action("Create","PersonaContacto")', $('#create_personaContacto').serialize(), null).then(response => {
                                document.getElementById("collapseExample").innerHTML = "";
                                document.getElementById("collapseExample").innerHTML = response.data;
                                this.ListContacto();
                                document.getElementById("create_personaContacto").reset();
                                ShowMessageErrorShort("Datos de contacto de emergencia  guardados", "success")
                            }).catch(error => {
                                if (error.response) {
                                    if (error.response.status === 400) {
                                        document.getElementById("collapseExample").innerHTML = "";
                                        document.getElementById("collapseExample").innerHTML = response.data;
                                    }
                                }
                                console.log(error)
                                ShowMessageErrorShort("Datos de contacto de emergencia no guardados", "error")
                            }).finally()
                        }
                    })
                },
                EditContacto: function (id) {
                    Swal.fire({
                        title: "¿Deseas guardar los cambios?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si!'
                    }).then((result) => {
                        if (result.value) {

                            axios.post('@Url.Action("Edit","PersonaContacto")', $('#Fedit_personaContacto_'+id).serialize(), null).then(response => {
                                document.getElementById("EditPersonaContacto_"+id).innerHTML = "";
                                document.getElementById("EditPersonaContacto_" + id).innerHTML = response.data;
                                this.ListContacto();
                                ShowMessageErrorShort("Datos de contacto de emergencia  guardados", "success")
                            }).catch(error => {
                                if (error.response) {
                                    if (error.response.status === 400) {
                                        document.getElementById("EditPersonaContacto_"+id).innerHTML = "";
                                        document.getElementById("EditPersonaContacto_"+id).innerHTML = response.data;
                                    }
                                }
                                ShowMessageErrorShort("Datos de contacto de emergencia no guardados", "error")
                            }).finally()
                        }
                    })
                },
                createSplittelEmpleado: function () {
                    Swal.fire({
                        title: "¿Deseas guardar los cambios?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si!'
                    }).then((result) => {
                        if (result.value) {

                            axios.post('@Url.Action("Create","SplittelEmpleado")', $('#createSplittelEmpleadoForm').serialize(), null).then(response => {
                                document.getElementById("CreateInfoEmpleadoContent").innerHTML = "";
                                document.getElementById("CreateInfoEmpleadoContent").innerHTML = response.data;
                                ShowMessageErrorShort("Datos del empleado guardados", "success")
                            }).catch(error => {
                                if (error.response) {
                                    if (error.response.status === 400) {
                                        document.getElementById("CreateInfoEmpleadoContent").innerHTML = "";
                                        document.getElementById("CreateInfoEmpleadoContent").innerHTML = response.data;
                                    }
                                }
                                ShowMessageErrorShort("Datos del empleado no guardados", "error")
                            }).finally()
                        }
                    })
                },
                EditSplittelEmpleado: function () {
                    Swal.fire({
                        title: "¿Deseas guardar los cambios?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si!'
                    }).then((result) => {
                        if (result.value) {

                            axios.post('@Url.Action("Edit","SplittelEmpleado")', $('#EditSplittelEmpleadoForm').serialize(), null).then(response => {
                                document.getElementById("CreateInfoEmpleadoContent").innerHTML = "";
                                document.getElementById("CreateInfoEmpleadoContent").innerHTML = response.data;
                                 ShowMessageErrorShort("Datos del empleado guardados", "success")
                            }).catch(error => {
                                if (error.response) {
                                    if (error.response.status === 400) {
                                        document.getElementById("CreateInfoEmpleadoContent").innerHTML = "";
                                        document.getElementById("CreateInfoEmpleadoContent").innerHTML = response.data;
                                    }
                                }
                                ShowMessageErrorShort("Datos del empleado no guardados", "error")
                            }).finally()
                        }
                    })
                },
                CreateInformacionMedica: function () {
                    Swal.fire({
                        title: "¿Deseas guardar los cambios?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si!'
                    }).then((result) => {
                        if (result.value) {
                            axios.post('@Url.Action("Create","InformacionMedica")', $('#CreateInformacionMedicaForm').serialize(), null).then(response => {
                                document.getElementById("CreateInformacionMedicaContent").innerHTML = "";
                                document.getElementById("CreateInformacionMedicaContent").innerHTML = response.data;
                                ShowMessageErrorShort("Datos del medicos empleado guardados", "success")
                            }).catch(error => {
                                if (error.response) {
                                    if (error.response.status === 400) {
                                        document.getElementById("CreateInformacionMedicaContent").innerHTML = "";
                                        document.getElementById("CreateInformacionMedicaContent").innerHTML = response.data;
                                    }
                                }
                                ShowMessageErrorShort("Datos del medicos empleado no guardados", "error")
                            }).finally()
                        }
                    })
                },
                EditInformacionMedica: function ( ) {
                    Swal.fire({
                        title: "¿Deseas guardar los cambios?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si!'
                    }).then((result) => {
                        if (result.value) {
                            let data = {
                                InformacionMedica: this.getFormData($('#EditInformacionMedica'))
                            }
                            axios.post('@Url.Action("Edit","InformacionMedica")', $('#EditInformacionMedicaForm').serialize(), null).then(response => {
                                document.getElementById("CreateInformacionMedicaContent").innerHTML = "";
                                document.getElementById("CreateInformacionMedicaContent").innerHTML = response.data;
                                ShowMessageErrorShort("Datos del medicos empleado guardados", "success")
                            }).catch(error => {
                                if (error.response) {
                                    if (error.response.status === 400) {
                                        document.getElementById("CreateInformacionMedicaContent").innerHTML = "";
                                        document.getElementById("CreateInformacionMedicaContent").innerHTML = response.data;
                                    }
                                }
                                ShowMessageErrorShort("Datos del medicos empleado no guardados", "error")
                            }).finally()
                        }
                    })
                },
                EditInformacionPersonal: function ( ) {
                    Swal.fire({

                        title: "¿Deseas guardar los cambios?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si!'
                    }).then((result) => {
                        if (result.value) {
                            axios.post('@Url.Action("Edit","Persona")', $('#EditInformacionPersonal').serialize(), null).then(response => {
                                document.getElementById("PersonaEdit").innerHTML = "";
                                document.getElementById("PersonaEdit").innerHTML = response.data;
                                ShowMessageErrorShort("Datos del personales empleado guardados", "success")
                            }).catch(error => {
                                if (error.response) {
                                    if (error.response.status === 400) {
                                        document.getElementById("PersonaEdit").innerHTML = "";
                                        document.getElementById("PersonaEdit").innerHTML = response.data;
                                    }
                                }
                                ShowMessageErrorShort("Datos del personales empleado no guardados", "error")
                            }).finally()
                        }
                    })
                },
                getFormData: function($form){
                    var unindexed_array = $form.serializeArray();
                    var indexed_array = {};

                    $.map(unindexed_array, function(n, i){
                        indexed_array[n['name']] = n['value'];
                    });

                    return indexed_array;
                },
                ProcessBadRequest: function (data) {
                    console.log(data)
                    console.log(typeof(data))
                    data.forEach(([key, value]) => {
                        console.log(`${key} ${value}`);
                    });
                }
            }
        });
    </script>
}

