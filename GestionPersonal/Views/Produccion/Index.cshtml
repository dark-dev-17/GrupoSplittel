@model IEnumerable<GPSInformation.Views.View_empleadoEnsamble>

@{
    ViewData["Title"] = "Asignacion de turnos";
}
<link href="~/template/lib/fullcalendar/fullcalendar.min.css" rel="stylesheet">
<link rel="stylesheet" href="~/template/assets/css/dashforge.calendar.css">
<link rel="stylesheet" href="~/template/assets/css/dashforge.contacts.css">
<div id="app_turnos">
    <table class="table table-sm table-condensed table-hover">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.NumeroNomina)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.NombreCompleto)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PuestoNombre)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.DescripcionTurno)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FechaFinturno)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.NumeroNomina)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.NombreCompleto)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PuestoNombre)
                    </td>
                    <td>
                        @if (item.IdTurnosProduccion == 0)
                        {
                            <span class="badge badge-danger">Sin turno</span>
                        }
                        else
                        {
                            if (item.IdTurnosProduccion == 1)
                            {
                                <span class="badge badge-primary">@Html.DisplayFor(modelItem => item.DescripcionTurno)</span>
                            }
                            else if (item.IdTurnosProduccion == 2)
                            {
                                <span class="badge badge-success">@Html.DisplayFor(modelItem => item.DescripcionTurno)</span>
                            }
                        }

                    </td>
                    <td>
                        @if (item.IdTurnosProduccion != 0)
                        {
                            @Html.DisplayFor(modelItem => item.FechaFinturno)
                        }
                    </td>
                    <td>
                        <a href="#modalActividadVacacionesPeriodos" data-toggle="modal" v-on:click="Getturno('@item.IdPersona')">Cambiar turno</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="modal calendar-modal-create fade effect-scale" id="modalActividadVacacionesPeriodos" role="dialog" data-backdrop="false" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-body pd-20 pd-sm-30">
                    <button type="button" class="close pos-absolute t-20 r-20" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true"><i data-feather="x"></i></span>
                    </button>
                    <h5 class="tx-18 tx-sm-20 mg-b-20 mg-sm-b-30">Cambio de turno</h5>
                    <div class="row">
                        <div class="col-lg-8">
                            <div class="">
                                <div id="calendar" class="calendar-content-body"></div>
                            </div><!-- calendar-content -->
                        </div>
                        <div class="col-lg-4" id="cambioResult"></div>
                    </div>
                </div><!-- modal-body -->
            </div><!-- modal-content -->
        </div><!-- modal-dialog -->
    </div><!-- modal -->
</div>

@section Scripts {
    <script src="~/template/lib/moment/min/moment.min.js"></script>
    <script src="~/template/lib/fullcalendar/fullcalendar.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js" integrity="sha512-T/tUfKSV1bihCnd+MxKD0Hm1uBBroVYBOYSk1knyvQ9VyZJpc/ALb4P0r6ubwVPSGB2GvjeoMAJJImBG12TiaQ==" crossorigin="anonymous"></script>
    <script src="~/template/assets/js/calendar-events.js"></script>
    <script>
        $(document).ready(function () {

        });
    </script>
    <script>
        var app_turnos = new Vue({
            el: "#app_turnos",
            data: {
                Reservaciones: [],
                ReservacionesB: [],
            },
            async mounted() {

            },
            methods: {
                Send: async function (id) {
                    await axios.post('@Url.Action("AsignarTurno", "Produccion")', $('#formAsignarturno').serialize(), null).then(response => {
                        document.getElementById("cambioResult").innerHTML = "";
                        document.getElementById("cambioResult").innerHTML = response.data;
                    }).catch(error => {
                        if (error.response) {
                            if (error.response.status === 400) {
                                document.getElementById("cambioResult").innerHTML = "";
                                document.getElementById("cambioResult").innerHTML = response.data;
                            }
                        }
                    }).finally()

                    await this.GetReservaciones(id);
                    this.StartCalendar();
                },
                Getturno: async function (id) {
                    document.getElementById("cambioResult").innerHTML = "";
                    axios.get('@Url.Action("AsignarTurno", "Produccion")/'+id,null, null).then(response => {
                        document.getElementById("cambioResult").innerHTML = "";
                        document.getElementById("cambioResult").innerHTML = response.data;
                    }).catch(error => {
                        if (error.response) {
                            if (error.response.status === 400) {
                                document.getElementById("cambioResult").innerHTML = "";
                                document.getElementById("cambioResult").innerHTML = response.data;
                            }
                        }
                    }).finally()

                    await this.GetReservaciones(id);
                    this.StartCalendar();
                },
                GetReservaciones: async function (id) {
                    await axios.post('@Url.Action("GetTunosHistorico", "Produccion")/'+id, null, null).then(response => {
                        ShowMessageErrorShort("Eventos obtenidos, procesando...", "success")
                        console.log(response.data);
                        var Reservacion_que = {
                            id: 1,
                            backgroundColor: 'rgba(1,104,250, .15)',
                            borderColor: '#0168fa',
                            events: []
                        }
                        response.data.turno_1.forEach((e, i) => {
                            var reservacion = {
                                id: e.idTurnoEmpleado,
                                start: e.fecha.substring(0,10)+"T00:00:00",
                                end: e.fecha.substring(0, 10) +"T23:59:00",
                                title: e.descripcionTurno,
                                description: ""
                            }
                            Reservacion_que.events.push(reservacion);
                        })
                        this.Reservaciones = Reservacion_que;

                        var Reservacion_queb = {
                            id: 2,
                            backgroundColor: 'rgba(16,183,89, .25)',
                            borderColor: '#10b759',
                            events: []
                        }
                        response.data.turno_b.forEach((e, i) => {
                            var reservacion = {
                                id: e.idTurnoEmpleado,
                                start: e.fecha.substring(0, 10) + "T00:00:00",
                                end: e.fecha.substring(0, 10) + "T23:59:00",
                                title: e.descripcionTurno,
                                description: ""
                            }
                            Reservacion_queb.events.push(reservacion);
                        })
                        this.ReservacionesB = Reservacion_queb;
                        console.log(this.ReservacionesB)
                    }).catch(error => {
                        if (error.response) {
                            if (error.response.status === 400) {
                                ShowMessageErrorShort(error.response.data,"error")
                            }
                        }
                    }).finally()
                },
                StartCalendar: function () {
                    $('#calendar').fullCalendar('destroy');
                    $('#calendar').fullCalendar('render');
                    $('#calendar').fullCalendar({
                        header: {
                          left: 'prev,next today',
                          center: 'title',
                          right: 'month,agendaWeek,agendaDay,listWeek'
                        },
                        navLinks: true,
                        selectable: true,
                        selectLongPressDelay: 100,
                        editable: true,
                        nowIndicator: true,
                        defaultView: 'listMonth',
                        views: {
                          agenda: {
                            columnHeaderHtml: function(mom) {
                              return '<span>' + mom.format('ddd') + '</span>' +
                                     '<span>' + mom.format('DD') + '</span>';
                            }
                          },
                          day: { columnHeader: false },
                          listMonth: {
                            listDayFormat: 'ddd DD',
                            listDayAltFormat: false
                          },
                          listWeek: {
                            listDayFormat: 'ddd DD',
                            listDayAltFormat: false
                          },
                          agendaThreeDay: {
                            type: 'agenda',
                            duration: { days: 3 },
                            titleFormat: 'MMMM YYYY'
                          }
                        },

                        eventSources: [this.Reservaciones, this.ReservacionesB],
                        eventAfterAllRender: function(view) {
                          if(view.name === 'listMonth' || view.name === 'listWeek') {
                            var dates = view.el.find('.fc-list-heading-main');
                            dates.each(function(){
                              var text = $(this).text().split(' ');
                              var now = moment().format('DD');

                              $(this).html(text[0]+'<span>'+text[1]+'</span>');
                              if(now === text[1]) { $(this).addClass('now'); }
                            });
                          }

                          //console.log(view.el);
                        },
                        eventRender: function(event, element) {

                          if(event.description) {
                            element.find('.fc-list-item-title').append('<span class="fc-desc">' + event.description + '</span>');
                            element.find('.fc-content').append('<span class="fc-desc">' + event.description + '</span>');
                          }

                          var eBorderColor = (event.source.borderColor)? event.source.borderColor : event.borderColor;
                          element.find('.fc-list-item-time').css({
                            color: eBorderColor,
                            borderColor: eBorderColor
                          });

                          element.find('.fc-list-item-title').css({
                            borderColor: eBorderColor
                          });

                          element.css('borderLeftColor', eBorderColor);
                        },
                    });
                    var calendar = $('#calendar').fullCalendar('getCalendar');

                    // change view to week when in tablet
                    if(window.matchMedia('(min-width: 576px)').matches) {
                        calendar.changeView('agendaWeek');
                    }

                    // change view to month when in desktop
                    if(window.matchMedia('(min-width: 992px)').matches) {
                        calendar.changeView('month');
                    }

                    // change view based in viewport width when resize is detected
                    calendar.option('windowResize', function(view) {
                        if(view.name === 'listWeek') {
                            if(window.matchMedia('(min-width: 992px)').matches) {
                            calendar.changeView('month');
                            } else {
                            calendar.changeView('listWeek');
                            }
                        }
                    });
                    // Display calendar event modal
                    calendar.on('eventClick', function(calEvent, jsEvent, view){



                    });
                }

            }
        });
    </script>
}

