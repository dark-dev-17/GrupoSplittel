@model IEnumerable<GPSInformation.Reportes.EmpleadogrupoProd>

@{
    ViewData["Title"] = "Gestión de grupos de producción";
}
<link href="~/template/lib/fullcalendar/fullcalendar.min.css" rel="stylesheet">
<link rel="stylesheet" href="~/template/assets/css/dashforge.calendar.css">
<link rel="stylesheet" href="~/template/assets/css/dashforge.contacts.css">
<div id="app_turnos">
    <div class="d-sm-flex align-items-center justify-content-between mg-b-20 mg-lg-b-30">
        <div>
            @*<nav aria-label="breadcrumb">
                    <ol class="breadcrumb breadcrumb-style1 mg-b-10">
                        <li class="breadcrumb-item"><a href="#">Dashboard</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Helpdesk Management</li>
                    </ol>
                </nav>*@
            <h4 class="mg-b-0 tx-spacing--1">@ViewData["Title"]</h4>
        </div>
        <div class="d-none d-md-block">
            <button class="btn btn-sm pd-x-15 btn-primary btn-uppercase mg-l-5"><i data-feather="plus" class="wd-10 mg-r-5"></i> Asignar varios</button>
        </div>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.NumeroNomina)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.NombreCompleto)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Puesto)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Ingreso)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Turno)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.NumeroNomina)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.NombreCompleto)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Puesto)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Ingreso)
                    </td>
                    <td>
                        @if (item.Turno == "Gris")
                        {
                            <span class="badge badge-secondary">@Html.DisplayFor(modelItem => item.Turno)</span>
                        }
                        else if (item.Turno == "Rojo")
                        {
                            <span class="badge badge-danger">@Html.DisplayFor(modelItem => item.Turno)</span>
                        }
                        else if (item.Turno == "Verde")
                        {
                            <span class="badge badge-success">@Html.DisplayFor(modelItem => item.Turno)</span>
                        }
                        else
                        {
                            <span class="badge badge-warning">Sin turno</span>
                        }


                    </td>
                    <td>
                        <a href="#modalActividadVacacionesPeriodos" data-toggle="modal" v-on:click="GetDataDetails('@Html.DisplayFor(modelItem => item.IdPersona)')">Cambiar grupo</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="modal calendar-modal-create fade effect-scale" id="modalActividadVacacionesPeriodos" role="dialog" data-backdrop="false" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-body pd-20 pd-sm-30">
                    <button type="button" class="close pos-absolute t-20 r-20" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true"><i data-feather="x"></i></span>
                    </button>
                    <h5 class="tx-18 tx-sm-20 mg-b-20 mg-sm-b-30">Cambio de turno</h5>

                    <div id="cambioResult"></div>
                </div><!-- modal-body -->
            </div><!-- modal-content -->
        </div><!-- modal-dialog -->
    </div><!-- modal -->
</div>

@section Scripts {
    <script src="~/template/lib/moment/min/moment.min.js"></script>
    <script src="~/template/lib/fullcalendar/fullcalendar.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js" integrity="sha512-T/tUfKSV1bihCnd+MxKD0Hm1uBBroVYBOYSk1knyvQ9VyZJpc/ALb4P0r6ubwVPSGB2GvjeoMAJJImBG12TiaQ==" crossorigin="anonymous"></script>
    <script src="~/template/assets/js/calendar-events.js"></script>
    <script>
        $(document).ready(function () {

        });
    </script>
    <script>
        var app_turnos = new Vue({
            el: "#app_turnos",
            data: {
                Gp_gris: {
                    id: 1,
                    backgroundColor: 'rgba(49, 48, 48, 0.47)',
                    borderColor: '#000000',
                    events: []
                },
                Gp_rojo: {
                    id: 2,
                    backgroundColor: 'rgba(255, 0, 0, 0.47)',
                    borderColor: '#fa4141',
                    events: []
                },
                Gp_verde: {
                    id: 3,
                    backgroundColor: 'rgba(16,183,89, .25)',
                    borderColor: '#10b759',
                    events: []
                },
            },
            async mounted() {

            },
            methods: {
                Save: async function () {
                    await axios.post('@Url.Action("Asignargrupo", "Produccion")', $('#formAsignargrupo').serialize(), null).then(response => {
                        document.getElementById("cambioResult").innerHTML = "";
                        document.getElementById("cambioResult").innerHTML = response.data;
                    }).catch(error => {
                        if (error.response) {
                            if (error.response.status === 400) {
                                document.getElementById("cambioResult").innerHTML = "";
                                document.getElementById("cambioResult").innerHTML = response.data;
                            }
                        }
                    }).finally()
                    await this.GetDataDetails(document.getElementById("IdPersona").value);
                },
                GetDataDetails: async function (id) {
                    this.Gp_gris.events = [];
                    this.Gp_rojo.events = [];
                    this.Gp_verde.events = [];

                    document.getElementById("cambioResult").innerHTML = "";
                    await axios.get('@Url.Action("Asignargrupo", "Produccion")/'+id,null, null).then(response => {
                        document.getElementById("cambioResult").innerHTML = "";
                        document.getElementById("cambioResult").innerHTML = response.data;
                    }).catch(error => {
                        if (error.response) {
                            if (error.response.status === 400) {
                                document.getElementById("cambioResult").innerHTML = "";
                                document.getElementById("cambioResult").innerHTML = response.data;
                            }
                        }
                    }).finally()
                    if (document.getElementById("calendar") != null) {

                    }
                    await axios.get('@Url.Action("EmpleadoGrupoDetais", "Produccion")/'+id,null, null).then(response => {
                        response.data.forEach((e, i) => {

                            //Reservacion_queb.events.push(reservacion);
                            if (e.idGrupo == 86) {
                                this.Gp_gris.events.push({
                                    id: e.idGrupoProduccion,
                                    start: e.fecha.substring(0, 10) + "T00:00:00",
                                    end: e.fecha.substring(0, 10) + "T23:59:00",
                                    title: "Gris",
                                    description: e.comentarios
                                });
                            }
                            else if (e.idGrupo == 87) {
                                this.Gp_rojo.events.push({
                                    id: e.idGrupoProduccion,
                                    start: e.fecha.substring(0, 10) + "T00:00:00",
                                    end: e.fecha.substring(0, 10) + "T23:59:00",
                                    title: "Rojo",
                                    description: e.comentarios
                                });
                            }
                            else if (e.idGrupo == 88) {
                                this.Gp_verde.events.push({
                                    id: e.idGrupoProduccion,
                                    start: e.fecha.substring(0, 10) + "T00:00:00",
                                    end: e.fecha.substring(0, 10) + "T23:59:00",
                                    title: "Verde",
                                    description: e.comentarios
                                });
                            }
                            else {

                            }
                        })
                    }).catch(error => {
                        if (error.response) {
                            if (error.response.status === 400) {
                                ShowMessageErrorShort(error.response.data, "error")
                            }
                        }
                    }).finally()
                    console.log(this.Gp_verde);
                    await this.StartCalendar();
                },
                StartCalendar: function () {
                    $('#calendar').fullCalendar('destroy');
                    $('#calendar').fullCalendar('render');
                    $('#calendar').fullCalendar({
                        header: {
                            left: 'prev,next today',
                            center: 'title',
                            right: 'month,agendaWeek,agendaDay,listWeek'
                        },
                        firstDay: 1,
                        navLinks: true,
                        selectable: true,
                        selectLongPressDelay: 100,
                        editable: true,
                        nowIndicator: true,
                        defaultView: 'listMonth',
                        views: {
                            agenda: {
                                columnHeaderHtml: function (mom) {
                                    return '<span>' + mom.format('ddd') + '</span>' +
                                        '<span>' + mom.format('DD') + '</span>';
                                }
                            },
                            day: { columnHeader: false },
                            listMonth: {
                                listDayFormat: 'ddd DD',
                                listDayAltFormat: false
                            },
                            listWeek: {
                                listDayFormat: 'ddd DD',
                                listDayAltFormat: false
                            },
                            agendaThreeDay: {
                                type: 'agenda',
                                duration: { days: 3 },
                                titleFormat: 'MMMM YYYY'
                            }
                        },

                        eventSources: [this.Gp_gris, this.Gp_rojo, this.Gp_verde],
                        eventAfterAllRender: function (view) {
                            if (view.name === 'listMonth' || view.name === 'listWeek') {
                                var dates = view.el.find('.fc-list-heading-main');
                                dates.each(function () {
                                    var text = $(this).text().split(' ');
                                    var now = moment().format('DD');

                                    $(this).html(text[0] + '<span>' + text[1] + '</span>');
                                    if (now === text[1]) { $(this).addClass('now'); }
                                });
                            }

                            //console.log(view.el);
                        },
                        eventRender: function (event, element) {

                            if (event.description) {
                                element.find('.fc-list-item-title').append('<span class="fc-desc">' + event.description + '</span>');
                                element.find('.fc-content').append('<span class="fc-desc">' + event.description + '</span>');
                            }

                            var eBorderColor = (event.source.borderColor) ? event.source.borderColor : event.borderColor;
                            element.find('.fc-list-item-time').css({
                                color: eBorderColor,
                                borderColor: eBorderColor
                            });

                            element.find('.fc-list-item-title').css({
                                borderColor: eBorderColor
                            });

                            element.css('borderLeftColor', eBorderColor);
                        },
                    });
                    var calendar = $('#calendar').fullCalendar('getCalendar');

                    // change view to week when in tablet
                    if (window.matchMedia('(min-width: 576px)').matches) {
                        calendar.changeView('agendaWeek');
                    }

                    // change view to month when in desktop
                    if (window.matchMedia('(min-width: 992px)').matches) {
                        calendar.changeView('month');
                    }

                    // change view based in viewport width when resize is detected
                    calendar.option('windowResize', function (view) {
                        if (view.name === 'listWeek') {
                            if (window.matchMedia('(min-width: 992px)').matches) {
                                calendar.changeView('month');
                            } else {
                                calendar.changeView('listWeek');
                            }
                        }
                    });
                    // Display calendar event modal
                    calendar.on('eventClick', function (calEvent, jsEvent, view) {



                    });
                }
            }
        });
    </script>
}
